version: '3.8'

services:
  # Node.js Application
  app:
    build: .
    container_name: job-portal-api
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - PORT=3000
      # Use Mongo root user for initial connection; adjust if you create an app user
      - MONGODB_URI=mongodb://admin:password123@mongo:27017/job-portal?authSource=admin
      # Optional Redis URL for queues/caching
      - REDIS_URL=redis://redis:6379
    env_file:
      - .env
    depends_on:
      - mongo
      - redis
    networks:
      - job-portal-network
    volumes:
      - ./uploads:/app/uploads
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3000/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # MongoDB Database
  mongo:
    image: mongo:7.0
    container_name: job-portal-mongo
    restart: unless-stopped
    ports:
      - "27017:27017"
    environment:
      - MONGO_INITDB_ROOT_USERNAME=admin
      - MONGO_INITDB_ROOT_PASSWORD=password123
      - MONGO_INITDB_DATABASE=job-portal
    volumes:
      - mongo_data:/data/db
      # Place any .js or .sh init scripts in ./mongo-init to create app users/collections
      - ./mongo-init:/docker-entrypoint-initdb.d
    networks:
      - job-portal-network
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # MongoDB Express (Database Admin UI) - Optional
  mongo-express:
    image: mongo-express:1.0.0
    container_name: job-portal-mongo-express
    restart: unless-stopped
    ports:
      - "8081:8081"
    environment:
      - ME_CONFIG_MONGODB_ADMINUSERNAME=admin
      - ME_CONFIG_MONGODB_ADMINPASSWORD=password123
      - ME_CONFIG_MONGODB_URL=mongodb://admin:password123@mongo:27017/
      - ME_CONFIG_BASICAUTH_USERNAME=admin
      - ME_CONFIG_BASICAUTH_PASSWORD=admin123
    depends_on:
      - mongo
    networks:
      - job-portal-network

  # Redis (for caching and sessions) - Optional
  redis:
    image: redis:7.2-alpine
    container_name: job-portal-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - job-portal-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  mongo_data:
    driver: local
  redis_data:
    driver: local

networks:
  job-portal-network:
    driver: bridge
